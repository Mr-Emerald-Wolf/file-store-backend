// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shared_files.sql

package db

import (
	"context"
)

const createSharedFile = `-- name: CreateSharedFile :one
INSERT INTO shared_files (user_id, file_id, s3_url)
VALUES ($1, $2, $3)
RETURNING id, user_id, file_id, s3_url, shared_at
`

type CreateSharedFileParams struct {
	UserID int32
	FileID int32
	S3Url  string
}

func (q *Queries) CreateSharedFile(ctx context.Context, arg CreateSharedFileParams) (SharedFile, error) {
	row := q.db.QueryRow(ctx, createSharedFile, arg.UserID, arg.FileID, arg.S3Url)
	var i SharedFile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileID,
		&i.S3Url,
		&i.SharedAt,
	)
	return i, err
}

const deleteExpiredSharedFiles = `-- name: DeleteExpiredSharedFiles :exec
DELETE FROM shared_files
WHERE shared_at < NOW() - INTERVAL '30 minutes'
`

func (q *Queries) DeleteExpiredSharedFiles(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSharedFiles)
	return err
}

const deleteSharedFile = `-- name: DeleteSharedFile :exec
DELETE FROM shared_files
WHERE id = $1
`

func (q *Queries) DeleteSharedFile(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSharedFile, id)
	return err
}

const deleteSharedFilesByFileID = `-- name: DeleteSharedFilesByFileID :exec
DELETE FROM shared_files
WHERE file_id = $1
`

func (q *Queries) DeleteSharedFilesByFileID(ctx context.Context, fileID int32) error {
	_, err := q.db.Exec(ctx, deleteSharedFilesByFileID, fileID)
	return err
}

const deleteSharedFilesByUserID = `-- name: DeleteSharedFilesByUserID :exec
DELETE FROM shared_files
WHERE user_id = $1
`

func (q *Queries) DeleteSharedFilesByUserID(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteSharedFilesByUserID, userID)
	return err
}

const getSharedFileByID = `-- name: GetSharedFileByID :one
SELECT id, user_id, file_id, s3_url, shared_at
FROM shared_files
WHERE id = $1
`

func (q *Queries) GetSharedFileByID(ctx context.Context, id int32) (SharedFile, error) {
	row := q.db.QueryRow(ctx, getSharedFileByID, id)
	var i SharedFile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileID,
		&i.S3Url,
		&i.SharedAt,
	)
	return i, err
}

const getSharedFilesByFileID = `-- name: GetSharedFilesByFileID :many
SELECT id, user_id, file_id, s3_url, shared_at
FROM shared_files
WHERE file_id = $1
`

func (q *Queries) GetSharedFilesByFileID(ctx context.Context, fileID int32) ([]SharedFile, error) {
	rows, err := q.db.Query(ctx, getSharedFilesByFileID, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SharedFile
	for rows.Next() {
		var i SharedFile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileID,
			&i.S3Url,
			&i.SharedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSharedFilesByUserID = `-- name: GetSharedFilesByUserID :many
SELECT id, user_id, file_id, s3_url, shared_at
FROM shared_files
WHERE user_id = $1
`

func (q *Queries) GetSharedFilesByUserID(ctx context.Context, userID int32) ([]SharedFile, error) {
	rows, err := q.db.Query(ctx, getSharedFilesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SharedFile
	for rows.Next() {
		var i SharedFile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileID,
			&i.S3Url,
			&i.SharedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
